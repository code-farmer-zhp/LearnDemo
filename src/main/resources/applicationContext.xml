<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

    <context:property-placeholder location="classpath*:application.properties"/>
    <bean id="commonConfig" abstract="true">
        <!-- 配置初始化大小、最小、最大 -->
        <property name="initialSize" value="${jdbc.master.initialSize}"/>
        <property name="minIdle" value="${jdbc.master.minIdle}"/>
        <property name="maxActive" value="${jdbc.master.maxActive}"/>
        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="${jdbc.master.maxWait}"/>
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.master.timeBetweenEvictionRunsMillis}"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.master.minEvictableIdleTimeMillis}"/>
        <property name="validationQuery" value="${jdbc.master.validationQuery}"/>
        <property name="testWhileIdle" value="${jdbc.master.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.master.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.master.testOnReturn}"/>
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 mysql false -->
        <property name="poolPreparedStatements" value="${jdbc.master.poolPreparedStatements}"/>
        <property name="maxPoolPreparedStatementPerConnectionSize"
                  value="${jdbc.master.maxPoolPreparedStatementPerConnectionSize}"/>
        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="${jdbc.master.filters}"/>
        <property name="connectionProperties" value="${jdbc.master.connectionProperties}"/>
    </bean>

    <bean id="dataSourcePrimary" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close" parent="commonConfig">

        <property name="url">
            <value>${mysql.jdbc.url.primary}</value>
        </property>
        <property name="username">
            <value>${mysql.jdbc.user.primary}</value>
        </property>
        <property name="password">
            <value>${mysql.jdbc.password.primary}</value>
        </property>
    </bean>


    <bean id="dataSourceSlave" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close" parent="commonConfig">

        <property name="url">
            <value>${mysql.jdbc.url.slave}</value>
        </property>
        <property name="username">
            <value>${mysql.jdbc.user.slave}</value>
        </property>
        <property name="password">
            <value>${mysql.jdbc.password.slave}</value>
        </property>
    </bean>


    <!-- ===================主备数据源热交换实现 start======================================== -->

    <bean id="hotSwapTarget" class="org.springframework.aop.target.HotSwappableTargetSource">
        <constructor-arg ref="dataSourcePrimary"/>
    </bean>

    <!--拦截方法后 要实现的逻辑-->
    <bean id="swapThrowsAdvice" class="spring.swap.source.SwapSourceThrowsAdvice">
        <property name="primary" ref="dataSourcePrimary"/>
        <property name="slave" ref="dataSourceSlave"/>
        <property name="targetSource" ref="hotSwapTarget"/>
    </bean>

    <!-- 切点和逻辑融合-->
    <bean id="swapThrowsAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
        <property name="advice" ref="swapThrowsAdvice"/>
        <property name="pattern" value=".*getConnection.*"/>
    </bean>

    <!-- 生成代理对象-->
    <bean id="dataSource" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="targetSource" ref="hotSwapTarget"/>
        <!--公开代理对象-->
        <property name="exposeProxy" value="true"/>
        <property name="interceptorNames">
            <list>
                <value>swapThrowsAdvisor</value>
            </list>
        </property>
    </bean>

    <bean id="transactionManagerScore" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- ===================主备数据源热交换实现 end======================================== -->


    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourcePrimary"/>
    </bean>

    <!--事务AOP实现-->
    <bean id="transactionInterceptor" class="org.springframework.transaction.interceptor.TransactionInterceptor">
        <property name="transactionManager" ref="transactionManager"/>
        <property name="transactionAttributes">
            <props>
                <prop key="get*">readOnly,timeout_20</prop>
            </props>
        </property>
    </bean>

    <bean id="springDaoService" class="spring.swap.source.SpringDaoService"/>

    <!-- 对service实现事务管理代理对象-->
    <bean id="service" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="springDaoService"/>
        <property name="proxyTargetClass" value="true"/>
        <property name="interceptorNames">
            <list>
                <value>transactionInterceptor</value>
            </list>
        </property>
    </bean>


</beans>